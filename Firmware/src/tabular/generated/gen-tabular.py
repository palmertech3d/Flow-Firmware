# @Author: Nick Steele
# @Date:   9:08 Oct 07 2021
# @Last modified by:   Nick Steele
# @Last modified time: 20:02 Oct 08 2021

# Generates a few lines of the tabular code

import sys
main_dir = sys.argv[1]

datatypes = [
    'float',
    'double',
    'uint8_t',
    'uint16_t',
    'uint32_t',
    'int8_t',
    'int16_t',
    'int32_t',
]

max_datatype_length = max([len(x) for x in datatypes])


def writeSpaces(fmt):
    return ' ' * (max_datatype_length - len(fmt) + 1)


genmsg = '''/***************************************************
 *  Generated at comilation using gen-tabular.py * *
 ***************************************************/\n'''


f = open(main_dir + '/tabular-generated.h', 'w')
f.write(genmsg)
f.write('#ifndef TABULAR_AUTOGENERATED_H\n#define TABULAR_AUTOGENERATED_H\n\n')
f.write('enum _TabularDataFmt_enum {\n')
[f.write('  FMT_' + fmt.upper() + ',') for fmt in datatypes]
f.write('};\n\n')
f.write('typedef struct TabularData_t {\n  union {\n')
[f.write('' + fmt + writeSpaces(fmt) + '*' + fmt + '_ptr;\n')
 for fmt in datatypes]
f.write('} ptr;\n')
f.write('  enum _TabularDataFmt_enum fmt;\n} TabularDataPtr_t;\n')
f.write('\n')
f.write('typedef struct TabularCallback_struct {\n  union {\n')
[f.write('' + fmt + writeSpaces(fmt) + fmt + '_val;\n') for fmt in datatypes]
f.write('} val;\n')
f.write('enum _TabularDataFmt_enum fmt;\n} TabularCallback_t;\n\n')
f.write('#endif //TABULAR_AUTOGENERATED_H\n')
f.close()

f = open(main_dir + '/tabular-generated.cpp', 'w')
f.write(genmsg)
f.write('#include "tabular/tabular.h"\n\n')
f.write(
    'void Tabular_t::logDataPoint(TabularData_t *tabular_ptr, bool print_comma) {\n')
f.write('switch(tabular_ptr->fmt) {\n')
for fmt in datatypes:
    f.write(
        f'case FMT_{fmt.upper()}: LOG_DATA(*tabular_ptr->ptr.{fmt + "_ptr"}); break;\n')
f.write('} // switch(tabular_ptr->fmt)\nif (print_comma) LOG_DATA(\',\');\n}\n')

f.write('\n\n')
f.write(
    'void Tabular_t::logDataPoint(TabularCallback_t callback_data, bool print_comma) {\n')
f.write('switch(callback_data.fmt) {\n')
for fmt in datatypes:
    f.write(
        f'case FMT_{fmt.upper()}: LOG_DATA(callback_data.val.{fmt + "_val"}); break;\n')
f.write('} // switch(callback_data->fmt)\nif (print_comma) LOG_DATA(\',\');\n}\n')
f.close()

print('Tabular files generated')
